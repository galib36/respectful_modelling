# Copyright (C) 2010 - 2013 by Pedro Mendes, Virginia Tech Intellectual 
# Properties, Inc., University of Heidelberg, and The University 
# of Manchester. 
# All rights reserved. 

# Copyright (C) 2008 - 2009 by Pedro Mendes, Virginia Tech Intellectual 
# Properties, Inc., EML Research, gGmbH, University of Heidelberg, 
# and The University of Manchester. 
# All rights reserved. 

# Copyright (C) 2006 - 2007 by Pedro Mendes, Virginia Tech Intellectual 
# Properties, Inc. and EML Research, gGmbH. 
# All rights reserved. 




TEMPLATE = lib
CONFIG -= qt

include($${BUILD_ROOT}/copasi/common.pri)
include($${BUILD_ROOT}/copasi/app.pri)

contains(BUILD_OS,WIN32){
   TARGET = _COPASI
} else {
   TARGET = CopasiPython
}

# the code generated by swig has to be compiled with -O1
# since -O2 and higher do things that might break the binary
QMAKE_CFLAGS_RELEASE -= -O3
QMAKE_CFLAGS_RELEASE -= -O2
QMAKE_CFLAGS_RELEASE += -O1
QMAKE_CXXFLAGS_RELEASE -= -O3
QMAKE_CXXFLAGS_RELEASE -= -O2
QMAKE_CXXFLAGS_RELEASE += -O1

COPASI_LIBS += $${COPASI_LIBS_SE}


INCLUDEPATH *= $${BUILD_ROOT}/copasi

contains(BUILD_OS,Linux) {
  LIBS = -L$${BUILD_ROOT}/copasi/lib  $$join(COPASI_LIBS, " -l", -l) $${LIBS}

  POST_TARGETDEPS += $$join(COPASI_LIBS, ".a  $${BUILD_ROOT}/copasi/lib/lib", $${BUILD_ROOT}/copasi/lib/lib, .a)

  !isEmpty(PYTHON_PATH){
    LIBS += $$system($${PYTHON_PATH}/bin/python-config --ldflags)
    QMAKE_CXXFLAGS *= $$system($${PYTHON_PATH}/bin/python-config --includes)
  } else {
    LIBS += $$system(python-config --ldflags)
    QMAKE_CFLAGS *= $$system(python-config --includes)
    QMAKE_CXXFLAGS *= $$system(python-config --includes)
  }

  !isEmpty(PYTHON_LIB_PATH){
    LIBS *= -L$${PYTHON_LIB_PATH}
  }

  !isEmpty(PYTHON_INCLUDE_PATH){
    INCLUDEPATH *= $${PYTHON_INCLUDE_PATH}
  }

 QMAKE_POST_LINK += ln -sf libCopasiPython.so _COPASI.so
  message($${QMAKE_LFLAGS})
}

contains(BUILD_OS, Darwin) {
  QMAKE_LFLAGS += -Wl,-search_paths_first
  
  LIBS = $$join(COPASI_LIBS, ".a  $${BUILD_ROOT}/copasi/lib/lib", $${BUILD_ROOT}/copasi/lib/lib, .a) \
         $${LIBS}
  
  POST_TARGETDEPS += $$join(COPASI_LIBS, ".a  $${BUILD_ROOT}/copasi/lib/lib", $${BUILD_ROOT}/copasi/lib/lib, .a)

  QMAKE_LFLAGS_SHLIB += -unexported_symbols_list unexported_symbols.list
  QMAKE_PRE_LINK = nm -g $${SBML_PATH}/lib/libsbml.a | grep "^[0-9]" | cut -d\" \" -f3  > unexported_symbols.list; \
                   nm -g $${EXPAT_PATH}/lib/libexpat.a | grep "^[0-9]" | cut -d\" \" -f3  >> unexported_symbols.list; \
                   nm -g $${RAPTOR_PATH}/lib/libraptor.a | grep "^[0-9]" | cut -d\" \" -f3  >> unexported_symbols.list;
                   
  !isEmpty(PYTHON_PATH){
    LIBS += $$system($${PYTHON_PATH}/bin/python-config --ldflags)
    QMAKE_CXXFLAGS *= $$system($${PYTHON_PATH}/bin/python-config --includes)
  } else {
    LIBS += $$system(python-config --ldflags)
    QMAKE_CFLAGS *= $$system(python-config --includes)
    QMAKE_CXXFLAGS *= $$system(python-config --includes)
  }

  !isEmpty(PYTHON_LIB_PATH){
    LIBS *= -L$${PYTHON_LIB_PATH}
  }

  !isEmpty(PYTHON_INCLUDE_PATH){
    INCLUDEPATH *= $${PYTHON_INCLUDE_PATH}
  }


  QMAKE_POST_LINK += ln -sf libCopasiPython.dylib _COPASI.so
}

contains(BUILD_OS, WIN32) { 
  CONFIG += debug_and_release

  debug {
    LIBS += $$join(COPASI_LIBS, ".lib  $${BUILD_ROOT}/copasi/lib/debug/", $${BUILD_ROOT}/copasi/lib/debug/, .lib)
  }
  release {
    LIBS += $$join(COPASI_LIBS, ".lib  $${BUILD_ROOT}/copasi/lib/release/", $${BUILD_ROOT}/copasi/lib/release/, .lib)
  }

  debug {
    PRE_TARGETDEPS += $$join(COPASI_LIBS, ".lib  $${BUILD_ROOT}/copasi/lib/debug/", $${BUILD_ROOT}/copasi/lib/debug/, .lib)
  }

  release {
    PRE_TARGETDEPS += $$join(COPASI_LIBS, ".lib  $${BUILD_ROOT}/copasi/lib/release/", $${BUILD_ROOT}/copasi/lib/release/, .lib)
  }

  CONFIG -= staticlib
  CONFIG *= dll
  CONFIG *= embed_manifest_dll
  LIBS *= delayimp.lib
  
  !isEmpty(PYTHON_LIB_PATH) {
    QMAKE_LFLAGS += /LIBPATH:"$${PYTHON_LIB_PATH}"
    debug {
      LIBS *= python27_d.lib
    } else { 
      LIBS *= python27.lib
    }
  }

  !isEmpty(PYTHON_INCLUDE_PATH) {
    INCLUDEPATH *= $$PYTHON_INCLUDE_PATH
    debug {
      INCLUDEPATH *= $$PYTHON_INCLUDE_PATH/../PC/
    }
  }
}


include($${BUILD_ROOT}/copasi/bindings/common/swig_files.pri)


UNITTEST_FILES = unittests/Test_CChemEq.py \
                 unittests/Test_CChemEqElement.py \
                 unittests/Test_CCompartment.py \
                 unittests/Test_CCopasiContainer.py \
                 unittests/Test_CCopasiDataModel.py \
                 unittests/Test_CCopasiMethod.py \
                 unittests/Test_CCopasiObject.py \
                 unittests/Test_CCopasiObjectName.py \
                 unittests/Test_CCopasiParameter.py \
                 unittests/Test_CCopasiParameterGroup.py \
                 unittests/Test_CCopasiProblem.py \
                 unittests/Test_CCopasiStaticString.py \
                 unittests/Test_CCopasiTask.py \
                 unittests/Test_CCopasiVector.py \
                 unittests/Test_CEvaluationTree.py \
                 unittests/Test_CFunction.py \
                 unittests/Test_CFunctionDB.py \
                 unittests/Test_CFunctionParameter.py \
                 unittests/Test_CFunctionParameters.py \
                 unittests/Test_CMatrix.py \
                 unittests/Test_CMetab.py \
                 unittests/Test_CModel.py \
                 unittests/Test_CModelValue.py \
                 unittests/Test_CMoiety.py \
                 unittests/Test_COutputAssistant.py \
                 unittests/Test_CReaction.py \
                 unittests/Test_CReport.py \
                 unittests/Test_CReportDefinition.py \
                 unittests/Test_CReportDefinitionVector.py \
                 unittests/Test_CState.py \
                 unittests/Test_CTimeSeries.py \
                 unittests/Test_CTrajectoryMethod.py \
                 unittests/Test_CTrajectoryProblem.py \
                 unittests/Test_CTrajectoryTask.py \
                 unittests/Test_CVersion.py \
                 unittests/Test_CEvent.py \
                 unittests/Test_CreateSimpleModel.py \
                 unittests/Test_RunSimulations.py \
                 unittests/runTests.py 
 


#DISTFILE   = $$SWIG_INTERFACE_FILES
#DISTFILES += local.cpp
#DISTFILES += python.i
#DISTFILES += $$UNITTEST_FILES

isEmpty(SWIG_PATH) {
    # check if the wrapper file is there
    !exists(copasi_wrapper.cpp) {
        error(Wrapper file copasi_wrapper.cpp missing. Please reconfigure with --with-swig=PATH_TO_SWIG.)
    }
}

!isEmpty(SWIG_PATH) {
    # check if swig is there and create a target to run it to create
    # copasi_wrapper.cpp
    contains(BUILD_OS, WIN32) {
        !exists($${SWIG_PATH}/swig.exe) {
        error(Unable to find swig excecutable in $${SWIG_PATH}. Please use --with-swig=PATH to specify the path where PATH/swig.exe is located.) 
         }
    }
    !contains(BUILD_OS, WIN32) {
      !exists($${SWIG_PATH}/bin/swig) {
        error(Unable to find swig excecutable in $${SWIG_PATH}/bin/. Please use --with-swig=PATH to specify the path where PATH/bin/swig is located.) 
      }
    }

    DEFINE_COMMANDLINE = $$join(DEFINES," -D",-D)
    contains(BUILD_OS, WIN32) {
      # since the wrapper file is in a subdirectory, we need to add 
      # the project directory to the include path
      INCLUDEPATH *= .

      WRAPPER_FILE_PATH = "."

      debug{
        WRAPPER_FILE_PATH = debug
        wrapper_source.target = "debug/copasi_wrapper.cpp"
      }	
      release{
        WRAPPER_FILE_PATH = release
        wrapper_source.target = "release/copasi_wrapper.cpp"
      }

      # we force the rebuild of the wrapper sources
      wrapper_source.depends = FORCE

      wrapper_source.commands = $(DEL_FILE) $${wrapper_source.target} & $${SWIG_PATH}/swig.exe $${DEFINE_COMMANDLINE}  -I$${BUILD_ROOT}-I$${BUILD_ROOT}/copasi -c++ -python -o $${wrapper_source.target} python.i

      QMAKE_EXTRA_TARGETS += wrapper_source
      debug {
        QMAKE_CLEAN += debug/copasi_wrapper.cpp 
        QMAKE_CLEAN += debug/COPASI.py 
      }

      release {
        QMAKE_CLEAN += release/copasi_wrapper.cpp 
        QMAKE_CLEAN += release/COPASI.py 
      }

      QMAKE_POST_LINK += ren $${WRAPPER_FILE_PATH}/_COPASI.dll _COPASI.pyd
    }
    !contains(BUILD_OS, WIN32){
      wrapper_source.target = copasi_wrapper.cpp
      wrapper_source.depends = $${SWIG_INTERFACE_FILES} python.i local.cpp
      wrapper_source.commands = $(DEL_FILE) $${wrapper_source.target} ; $${SWIG_PATH}/bin/swig $${DEFINE_COMMANDLINE} -classic  -I$${BUILD_ROOT} -I$${BUILD_ROOT}/copasi -c++ -python -o $${wrapper_source.target} python.i
  
      QMAKE_EXTRA_TARGETS += wrapper_source
      QMAKE_CLEAN += copasi_wrapper.cpp 
      QMAKE_CLEAN += COPASI.py 
    }
    PRE_TARGETDEPS += $${wrapper_source.target}
}


SOURCES += $${wrapper_source.target}
# under windows qmake seems to ignore the last line of project files

