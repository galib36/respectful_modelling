# Copyright (C) 2011 - 2013 by Pedro Mendes, Virginia Tech Intellectual 
# Properties, Inc., University of Heidelberg, and The University 
# of Manchester. 
# All rights reserved. 


TEMPLATE = lib
CONFIG -= qt

# disable library versioning
CONFIG += plugin

include(../../common.pri)
include(../../app.pri)

TARGET = COPASIMONO

release{ 
  # the code generated by swig has to be compiled with -O1
  # since -O2 and higher do things that might break the binary
  QMAKE_CFLAGS_RELEASE -= -O3
  QMAKE_CFLAGS_RELEASE -= -O2
  QMAKE_CFLAGS_RELEASE += -O1
  QMAKE_CXXFLAGS_RELEASE -= -O3
  QMAKE_CXXFLAGS_RELEASE -= -O2
  QMAKE_CXXFLAGS_RELEASE += -O1

  GMCS_FLAGS = /target:library
}

debug{ 
  QMAKE_CFLAGS_RELEASE -= -O3
  QMAKE_CFLAGS_RELEASE -= -O2
  QMAKE_CFLAGS_RELEASE -= -O1
  QMAKE_CFLAGS_RELEASE += -g -O0
  QMAKE_CXXFLAGS_RELEASE -= -O3
  QMAKE_CXXFLAGS_RELEASE -= -O2
  QMAKE_CXXFLAGS_RELEASE -= -O1
  QMAKE_CXXFLAGS_RELEASE += -g -O0
  
  GMCS_FLAGS = /debug /target:library 
}

COPASI_LIBS += $${COPASI_LIBS_SE}


INCLUDEPATH += ../../..
contains(BUILD_OS,Linux){
  LIBS = -L../../lib \
         $$join(COPASI_LIBS, " -l", -l) \
         $${LIBS}

  POST_TARGETDEPS += $$join(COPASI_LIBS, ".a  ../../lib/lib", ../../lib/lib, .a)
}


contains(BUILD_OS, Darwin) {
  QMAKE_LFLAGS += -Wl,-search_paths_first
  
  LIBS = $$join(COPASI_LIBS, ".a  ../../lib/lib", ../../lib/lib, .a) \
         $${LIBS}
  
  POST_TARGETDEPS += $$join(COPASI_LIBS, ".a  ../../lib/lib", ../../lib/lib, .a)

    LIBS += -framework JavaVM
    LIBS += -framework QuickTime
    LIBS += -framework Carbon
    LIBS += -framework Accelerate

    QMAKE_LFLAGS_SHLIB += -unexported_symbols_list unexported_symbols.list
    
    # make a hard link from the generated dylib file to a file with the ending
    # jnilib
    QMAKE_PRE_LINK = nm -g $${SBML_PATH}/lib/libsbml.a | grep "^[0-9]" | cut -d\" \" -f3  > unexported_symbols.list ; nm -g $${EXPAT_PATH}/lib/libexpat.a | grep "^[0-9]" | cut -d\" \" -f3  >> unexported_symbols.list

}

contains(BUILD_OS, WIN32) { 
  CONFIG += debug_and_release

  debug {
    LIBS += $$join(COPASI_LIBS, ".lib  ../../lib/debug/", ../../lib/debug/, .lib)
  }
  release {
    LIBS += $$join(COPASI_LIBS, ".lib  ../../lib/release/", ../../lib/release/, .lib)
  }

  debug {
    PRE_TARGETDEPS += $$join(COPASI_LIBS, ".lib  ../../lib/debug/", ../../lib/debug/, .lib)
  }

  release {
    PRE_TARGETDEPS += $$join(COPASI_LIBS, ".lib  ../../lib/release/", ../../lib/release/, .lib)
  }

  CONFIG -= staticlib
  CONFIG += dll
  CONFIG += embed_manifest_dll
  LIBS += delayimp.lib


}

include(../common/swig_files.pri)


#DISTFILE   = $$SWIG_INTERFACE_FILES
#DISTFILES += local.cpp
#DISTFILES += csharp.i

isEmpty(SWIG_PATH){
    # check if the wrapper file is there
    !exists(copasi_wrapper.cpp){
        error(Wrapper file copasi_wrapper.cpp missing. Please reconfigure with --with-swig=PATH_TO_SWIG.)
    }
}

!isEmpty(SWIG_PATH){
    # check if swig is there and create a target to run it to create
    # copasi_wrapper.cpp
    contains(BUILD_OS, WIN32){
        !exists($${SWIG_PATH}\\swig.exe){
        error(Unable to find swig excecutable in $${SWIG_PATH}. Please use --with-swig=PATH to specify the path where PATH/swig.exe is located.) 
         }
    }
    !contains(BUILD_OS, WIN32){
      !exists($${SWIG_PATH}/bin/swig){
        error(Unable to find swig excecutable in $${SWIG_PATH}/bin/. Please use --with-swig=PATH to specify the path where PATH/bin/swig is located.) 
      }
    }

    DEFINE_COMMANDLINE = $$join(DEFINES," -D",-D)
    contains(BUILD_OS, WIN32){
      # since the wrapper file is in a subdirectory, we need to add 
      # the project directory to the include path
      INCLUDEPATH += .

      WRAPPER_FILE_PATH = "."

      debug{
        WRAPPER_FILE_PATH = debug
        wrapper_source.target = "debug\\copasi_wrapper.cpp"
      }	
      release{
        WRAPPER_FILE_PATH = release
        wrapper_source.target = "release\\copasi_wrapper.cpp"
      }

      # we force the rebuild of the wrapper sources
      wrapper_source.depends = FORCE

      wrapper_source.commands = $(DEL_FILE) $${wrapper_source.target} & $(MKDIR) $${WRAPPER_FILE_PATH}\\mono_files & $(DEL_FILE) $${WRAPPER_FILE_PATH}\\mono_files\\*.cs & $(DEL_FILE) $${WRAPPER_FILE_PATH}\\mono_files\\*.dll & $${SWIG_PATH}\\swig.exe $${DEFINE_COMMANDLINE} -I..\\.. -I..\\..\\.. -c++ -csharp -o $${wrapper_source.target} -namespace org.COPASI -outdir $${WRAPPER_FILE_PATH}\\mono_files\\ -DSWIG_CSHARP_NO_IMCLASS_STATIC_CONSTRUCTOR -dllimport COPASIMONO csharp.i && cd $${WRAPPER_FILE_PATH}\\mono_files && $${MCS_BIN} $${GMCS_FLAGS} /out:..\COPASI.dll *.cs  && cd ..\\.. 

      QMAKE_EXTRA_TARGETS += wrapper_source
      debug {
        QMAKE_CLEAN += debug\\copasi_wrapper.cpp 
        QMAKE_CLEAN += debug\\mono_files/*.cs
        QMAKE_CLEAN += debug\\mono_files/*.dll
      }

      release {
        QMAKE_CLEAN += release\\copasi_wrapper.cpp 
        QMAKE_CLEAN += release\\mono_files/*.cs
        QMAKE_CLEAN += release\\mono_files/*.dll
      }

    }

    !contains(BUILD_OS, WIN32){

      wrapper_source.target = copasi_wrapper.cpp
      wrapper_source.depends = $${SWIG_INTERFACE_FILES} csharp.i local.cpp
      wrapper_source.commands = $(DEL_FILE) $${wrapper_source.target}; $(DEL_FILE) mono_files/*.cs mono_files/*.dll; mkdir mono_files ; $${SWIG_PATH}/bin/swig $${DEFINE_COMMANDLINE} -I../.. -I../../.. -c++ -csharp -o $${wrapper_source.target} -namespace org.COPASI -outdir mono_files/ -DSWIG_CSHARP_NO_IMCLASS_STATIC_CONSTRUCTOR -dllimport COPASIMONO csharp.i; cd mono_files; $${MCS_BIN} $${GMCS_FLAGS} /out:../COPASI.dll *.cs 

      QMAKE_EXTRA_TARGETS += wrapper_source
QMAKE_CLEAN += copasi_wrapper.cpp 
QMAKE_CLEAN += mono_files/*.cs
QMAKE_CLEAN += mono_files/*.dll
    }
    PRE_TARGETDEPS += $${wrapper_source.target}
}


SOURCES += $${wrapper_source.target}
# under windows qmake seems to ignore the last line of project files

