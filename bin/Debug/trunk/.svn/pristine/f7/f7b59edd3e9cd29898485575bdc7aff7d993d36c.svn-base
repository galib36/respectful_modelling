ADD_DEFINITIONS(-DC_EXPORTS)
cmake_policy(SET CMP0015 OLD)

FIND_PATH( OCTAVE_INCLUDE_DIR octave.h ${EXECUTABLE_OUTPUT_PATH}/octave )
FIND_LIBRARY( OCTAVE_CRUFT_LIBRARY NAMES cruft PATH  ${EXECUTABLE_OUTPUT_PATH}/octave)
FIND_LIBRARY( OCTAVE_OCTAVE_LIBRARY NAMES octave PATH  ${EXECUTABLE_OUTPUT_PATH}/octave)
FIND_LIBRARY( OCTAVE_OCTAVEINTERP_LIBRARY NAMES octinterp PATH  ${EXECUTABLE_OUTPUT_PATH}/octave)

FIND_PATH( OCTAVE_LIB_DIR liboctave.dylib ${TINKERCELL_SOURCE_DIR}/octave )

#DBL_ definitions are missing in new MinGW -- why did they do that?
IF (WIN32 AND MINGW)
	ADD_DEFINITIONS(-DDBL_EPSILON=2.22045e-16)
	ADD_DEFINITIONS(-DDBL_MIN=1e-999)
	ADD_DEFINITIONS(-DDBL_MIN_EXP=-999)
	ADD_DEFINITIONS(-DDBL_MIN_10_EXP=-307)
	ADD_DEFINITIONS(-DDBL_MAX_10_EXP=+307)
	ADD_DEFINITIONS(-DDBL_MAX=1.79769e+308)
ENDIF (WIN32 AND MINGW)

IF(OCTAVE_CRUFT_LIBRARY AND OCTAVE_OCTAVE_LIBRARY AND OCTAVE_OCTAVEINTERP_LIBRARY AND OCTAVE_INCLUDE_DIR)

   MESSAGE(STATUS "Using Octave libraries: ${OCTAVE_CRUFT_LIBRARY} ${OCTAVE_OCTAVE_LIBRARY} ${OCTAVE_OCTAVEINTERP_LIBRARY}")
   INCLUDE_DIRECTORIES( BEFORE ${OCTAVE_INCLUDE_DIR} )
   LINK_DIRECTORIES( BEFORE ${OCTAVE_LIB_DIR})
#  ADD_DEFINITIONS(-D__cplusplus)

	IF ( WIN32 )
	   MESSAGE(STATUS "To embed Octave in Win32, be sure that you have commented out HAVE_HDF5 and HAVE_REGEX in ${OCTAVE_INCLUDE_DIR}/octave/config.h")
	  ADD_DEFINITIONS(-D_WIN32)
	  ADD_DEFINITIONS(-DTCAPIEXPORT=)
	  IF (MINGW)
		 ADD_DEFINITIONS(-D__MINGW32__)
		 IF (USE_STDCALL)
			ADD_DEFINITIONS(-DUSE_STDCALL)
		 ENDIF(USE_STDCALL)
	  ENDIF(MINGW)     
	ENDIF( WIN32 )

	#extend
	ADD_LIBRARY( copasi
		SHARED
		copasi_api_wrap.cpp
	)

	TARGET_LINK_LIBRARIES( copasi
		copasi
		copasi_api
		${OCTAVE_CRUFT_LIBRARY}
		${OCTAVE_OCTAVE_LIBRARY}
		${OCTAVE_OCTAVEINTERP_LIBRARY}
	)

	SET_TARGET_PROPERTIES( copasi PROPERTIES SUFFIX ".oct" PREFIX "")
ENDIF(OCTAVE_CRUFT_LIBRARY AND OCTAVE_OCTAVE_LIBRARY AND OCTAVE_OCTAVEINTERP_LIBRARY AND OCTAVE_INCLUDE_DIR)

