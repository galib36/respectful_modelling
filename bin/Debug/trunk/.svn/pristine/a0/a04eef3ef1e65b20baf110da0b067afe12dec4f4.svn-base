#get Python libs
SET(LIBRARY_OUTPUT_PATH ${EXECUTABLE_OUTPUT_PATH})
ADD_DEFINITIONS(-DC_EXPORTS)

IF( WIN32 AND MINGW)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -nostdlib -msvcrt90")
ENDIF( WIN32 AND MINGW)
	
IF (NOT DEFINED PYTHON_INCLUDE_PATH OR NOT DEFINED PYTHON_LIBRARY)
	FIND_PACKAGE( PythonLibs )
ENDIF (NOT DEFINED PYTHON_INCLUDE_PATH OR NOT DEFINED PYTHON_LIBRARY)

IF (DEFINED PYTHON_LIB)
	SET(PYTHON_LIBRARY ${PYTHON_LIB})
ENDIF (DEFINED PYTHON_LIB)

IF ((DEFINED PYTHON_INCLUDE_PATH) AND (NOT DEFINED PYTHON_INCLUDE_DIR))
	SET(PYTHON_INCLUDE_DIR ${PYTHON_INCLUDE_PATH})
ENDIF ((DEFINED PYTHON_INCLUDE_PATH) AND (NOT DEFINED PYTHON_INCLUDE_DIR))

IF (DEFINED PYTHON_INCLUDE_DIRS)
   SET(PYTHON_INCLUDE_DIR ${PYTHON_INCLUDE_DIRS})
ENDIF (DEFINED PYTHON_INCLUDE_DIRS)

#DBL_ definitions are missing in new MinGW -- why did they do that?
IF (WIN32 AND MINGW)
	ADD_DEFINITIONS(-DDBL_EPSILON=2.22045e-16)
	ADD_DEFINITIONS(-DDBL_MIN=1e-999)
	ADD_DEFINITIONS(-DDBL_MIN_EXP=-999)
	ADD_DEFINITIONS(-DDBL_MIN_10_EXP=-307)
	ADD_DEFINITIONS(-DDBL_MAX_10_EXP=+307)
	ADD_DEFINITIONS(-DDBL_MAX=1.79769e+308)
ENDIF (WIN32 AND MINGW)

IF (NOT IS_DIRECTORY ${PYTHON_INCLUDE_DIR} OR NOT DEFINED PYTHON_LIBRARY)
	IF (NOT IS_DIRECTORY ${PYTHON_INCLUDE_DIR})
		 MESSAGE(WARNING "Directory PYTHON_INCLUDE_PATH not found. Use Add Entry to add it")
	ENDIF (NOT IS_DIRECTORY ${PYTHON_INCLUDE_DIR})
	IF (NOT DEFINED PYTHON_LIBRARY)
		 MESSAGE(WARNING "File PYTHON_LIB not found. Use Add Entry to add it")
	ENDIF (NOT DEFINED PYTHON_LIBRARY)
ELSE (NOT IS_DIRECTORY ${PYTHON_INCLUDE_DIR} OR NOT DEFINED PYTHON_LIBRARY)

MESSAGE(STATUS "Using Python library: ${PYTHON_LIBRARY}")

IF ( WIN32 )
  ADD_DEFINITIONS(-D_WIN32)
  ADD_DEFINITIONS(-DNODLOPEN)
  IF (MINGW)
	 ADD_DEFINITIONS(-D__MINGW32__)
  ENDIF(MINGW)
ENDIF( WIN32 )

IF ( APPLE )
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -framework Python")
  ADD_DEFINITIONS(-DNODLOPEN)
ENDIF ( APPLE )

INCLUDE_DIRECTORIES( BEFORE ${PYTHON_INCLUDE_DIR} )

ADD_LIBRARY( _copasi
  SHARED
  copasi_api_wrap.c
)

TARGET_LINK_LIBRARIES( _copasi
  _copasi
  copasi_api
  ${PYTHON_LIBRARY}
)

IF ( WIN32 )
   SET_TARGET_PROPERTIES( _copasi PROPERTIES SUFFIX ".pyd" PREFIX "")
ELSE ( WIN32 )
	SET_TARGET_PROPERTIES( _copasi PROPERTIES SUFFIX ".so" PREFIX "")
ENDIF( WIN32 )

CONFIGURE_FILE( 
	${CMAKE_CURRENT_SOURCE_DIR}/copasi.py
	${EXECUTABLE_OUTPUT_PATH}/copasi.py
	@ONLY
)

ENDIF (NOT IS_DIRECTORY ${PYTHON_INCLUDE_DIR} OR NOT DEFINED PYTHON_LIBRARY)

